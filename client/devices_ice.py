# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `devices.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module DevicesIce
_M_DevicesIce = Ice.openModule('DevicesIce')
__name__ = 'DevicesIce'

if 'Pixel' not in _M_DevicesIce.__dict__:
    _M_DevicesIce.Pixel = Ice.createTempClass()
    class Pixel(object):
        def __init__(self, value=0.0):
            self.value = value

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_DevicesIce.Pixel):
                return NotImplemented
            else:
                if self.value != other.value:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_DevicesIce._t_Pixel)

        __repr__ = __str__

    _M_DevicesIce._t_Pixel = IcePy.defineStruct('::DevicesIce::Pixel', Pixel, (), (('value', (), IcePy._t_double),))

    _M_DevicesIce.Pixel = Pixel
    del Pixel

if '_t_PixelBuffer' not in _M_DevicesIce.__dict__:
    _M_DevicesIce._t_PixelBuffer = IcePy.defineSequence('::DevicesIce::PixelBuffer', (), _M_DevicesIce._t_Pixel)

if 'Frame' not in _M_DevicesIce.__dict__:
    _M_DevicesIce.Frame = Ice.createTempClass()
    class Frame(object):
        def __init__(self, rows=0, cols=0, buffer=None):
            self.rows = rows
            self.cols = cols
            self.buffer = buffer

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_DevicesIce.Frame):
                return NotImplemented
            else:
                if self.rows != other.rows:
                    return False
                if self.cols != other.cols:
                    return False
                if self.buffer != other.buffer:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_DevicesIce._t_Frame)

        __repr__ = __str__

    _M_DevicesIce._t_Frame = IcePy.defineStruct('::DevicesIce::Frame', Frame, (), (
        ('rows', (), IcePy._t_int),
        ('cols', (), IcePy._t_int),
        ('buffer', (), _M_DevicesIce._t_PixelBuffer)
    ))

    _M_DevicesIce.Frame = Frame
    del Frame

_M_DevicesIce._t_Device = IcePy.defineValue('::DevicesIce::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_DevicesIce.__dict__:
    _M_DevicesIce.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def info(self, context=None):
            return _M_DevicesIce.Device._op_info.invoke(self, ((), context))

        def infoAsync(self, context=None):
            return _M_DevicesIce.Device._op_info.invokeAsync(self, ((), context))

        def begin_info(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_DevicesIce.Device._op_info.begin(self, ((), _response, _ex, _sent, context))

        def end_info(self, _r):
            return _M_DevicesIce.Device._op_info.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_DevicesIce.DevicePrx.ice_checkedCast(proxy, '::DevicesIce::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_DevicesIce.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::DevicesIce::Device'
    _M_DevicesIce._t_DevicePrx = IcePy.defineProxy('::DevicesIce::Device', DevicePrx)

    _M_DevicesIce.DevicePrx = DevicePrx
    del DevicePrx

    _M_DevicesIce.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::DevicesIce::Device', '::Ice::Object')

        def ice_id(self, current=None):
            return '::DevicesIce::Device'

        @staticmethod
        def ice_staticId():
            return '::DevicesIce::Device'

        def info(self, current=None):
            raise NotImplementedError("servant method 'info' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_DevicesIce._t_DeviceDisp)

        __repr__ = __str__

    _M_DevicesIce._t_DeviceDisp = IcePy.defineClass('::DevicesIce::Device', Device, (), None, ())
    Device._ice_type = _M_DevicesIce._t_DeviceDisp

    Device._op_info = IcePy.Operation('info', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_DevicesIce.Device = Device
    del Device

_M_DevicesIce._t_Camera = IcePy.defineValue('::DevicesIce::Camera', Ice.Value, -1, (), False, True, None, ())

if 'CameraPrx' not in _M_DevicesIce.__dict__:
    _M_DevicesIce.CameraPrx = Ice.createTempClass()
    class CameraPrx(_M_DevicesIce.DevicePrx):

        def getFrame(self, context=None):
            return _M_DevicesIce.Camera._op_getFrame.invoke(self, ((), context))

        def getFrameAsync(self, context=None):
            return _M_DevicesIce.Camera._op_getFrame.invokeAsync(self, ((), context))

        def begin_getFrame(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_DevicesIce.Camera._op_getFrame.begin(self, ((), _response, _ex, _sent, context))

        def end_getFrame(self, _r):
            return _M_DevicesIce.Camera._op_getFrame.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_DevicesIce.CameraPrx.ice_checkedCast(proxy, '::DevicesIce::Camera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_DevicesIce.CameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::DevicesIce::Camera'
    _M_DevicesIce._t_CameraPrx = IcePy.defineProxy('::DevicesIce::Camera', CameraPrx)

    _M_DevicesIce.CameraPrx = CameraPrx
    del CameraPrx

    _M_DevicesIce.Camera = Ice.createTempClass()
    class Camera(_M_DevicesIce.Device):

        def ice_ids(self, current=None):
            return ('::DevicesIce::Camera', '::DevicesIce::Device', '::Ice::Object')

        def ice_id(self, current=None):
            return '::DevicesIce::Camera'

        @staticmethod
        def ice_staticId():
            return '::DevicesIce::Camera'

        def getFrame(self, current=None):
            raise NotImplementedError("servant method 'getFrame' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_DevicesIce._t_CameraDisp)

        __repr__ = __str__

    _M_DevicesIce._t_CameraDisp = IcePy.defineClass('::DevicesIce::Camera', Camera, (), None, (_M_DevicesIce._t_DeviceDisp,))
    Camera._ice_type = _M_DevicesIce._t_CameraDisp

    Camera._op_getFrame = IcePy.Operation('getFrame', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_DevicesIce._t_Frame, False, 0), ())

    _M_DevicesIce.Camera = Camera
    del Camera

# End of module DevicesIce
