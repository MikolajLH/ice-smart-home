//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `devices.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package DevicesIce;

public class Frame implements java.lang.Cloneable,
                              java.io.Serializable
{
    public int rows;

    public int cols;

    public Pixel[] buffer;

    public Frame()
    {
    }

    public Frame(int rows, int cols, Pixel[] buffer)
    {
        this.rows = rows;
        this.cols = cols;
        this.buffer = buffer;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Frame r = null;
        if(rhs instanceof Frame)
        {
            r = (Frame)rhs;
        }

        if(r != null)
        {
            if(this.rows != r.rows)
            {
                return false;
            }
            if(this.cols != r.cols)
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.buffer, r.buffer))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::DevicesIce::Frame");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, rows);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, cols);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, buffer);
        return h_;
    }

    public Frame clone()
    {
        Frame c = null;
        try
        {
            c = (Frame)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeInt(this.rows);
        ostr.writeInt(this.cols);
        PixelBufferHelper.write(ostr, this.buffer);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.rows = istr.readInt();
        this.cols = istr.readInt();
        this.buffer = PixelBufferHelper.read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Frame v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Frame ice_read(com.zeroc.Ice.InputStream istr)
    {
        Frame v = new Frame();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Frame> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Frame v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Frame> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Frame.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Frame _nullMarshalValue = new Frame();

    /** @hidden */
    public static final long serialVersionUID = 182311487L;
}
